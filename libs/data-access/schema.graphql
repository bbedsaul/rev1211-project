# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# The `BigInt` scalar type represents non-fractional signed whole numeric values.
scalar Long

# The `Upload` scalar type represents a file upload.
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input LongFilterInput {
  and: [Long]
  or: [Long]
  not: LongFilterInput
  eq: Long
  eqi: Long
  ne: Long
  startsWith: Long
  endsWith: Long
  contains: Long
  notContains: Long
  containsi: Long
  notContainsi: Long
  gt: Long
  gte: Long
  lt: Long
  lte: Long
  null: Boolean
  notNull: Boolean
  in: [Long]
  notIn: [Long]
  between: [Long]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  folder: ID
  folderPath: String
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  pathId: IntFilterInput
  parent: UploadFolderFiltersInput
  children: UploadFolderFiltersInput
  files: UploadFileFiltersInput
  path: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFolderFiltersInput]
  or: [UploadFolderFiltersInput]
  not: UploadFolderFiltersInput
}

input UploadFolderInput {
  name: String
  pathId: Int
  parent: ID
  children: [ID]
  files: [ID]
  path: String
}

type UploadFolder {
  name: String!
  pathId: Int!
  parent: UploadFolderEntityResponse
  children(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderRelationResponseCollection
  files(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  path: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFolderEntity {
  id: ID
  attributes: UploadFolder
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  user_profile: UserProfileFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  user_profile: ID
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  user_profile: UserProfileEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input CustomLinksCustomLinkFiltersInput {
  id: IDFilterInput
  uri: StringFilterInput
  kind: StringFilterInput
  contentId: LongFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [CustomLinksCustomLinkFiltersInput]
  or: [CustomLinksCustomLinkFiltersInput]
  not: CustomLinksCustomLinkFiltersInput
}

input CustomLinksCustomLinkInput {
  uri: String
  kind: String
  contentId: Long
}

type CustomLinksCustomLink {
  uri: String
  kind: String
  contentId: Long
  createdAt: DateTime
  updatedAt: DateTime
}

type CustomLinksCustomLinkEntity {
  id: ID
  attributes: CustomLinksCustomLink
}

type CustomLinksCustomLinkEntityResponse {
  data: CustomLinksCustomLinkEntity
}

type CustomLinksCustomLinkEntityResponseCollection {
  data: [CustomLinksCustomLinkEntity!]!
  meta: ResponseCollectionMeta!
}

input CustomLinksTempuriFiltersInput {
  id: IDFilterInput
  uri: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [CustomLinksTempuriFiltersInput]
  or: [CustomLinksTempuriFiltersInput]
  not: CustomLinksTempuriFiltersInput
}

input CustomLinksTempuriInput {
  uri: String
}

type CustomLinksTempuri {
  uri: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CustomLinksTempuriEntity {
  id: ID
  attributes: CustomLinksTempuri
}

type CustomLinksTempuriEntityResponse {
  data: CustomLinksTempuriEntity
}

type CustomLinksTempuriEntityResponseCollection {
  data: [CustomLinksTempuriEntity!]!
  meta: ResponseCollectionMeta!
}

input EzformsSubmissionFiltersInput {
  id: IDFilterInput
  score: StringFilterInput
  formName: StringFilterInput
  data: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [EzformsSubmissionFiltersInput]
  or: [EzformsSubmissionFiltersInput]
  not: EzformsSubmissionFiltersInput
}

input EzformsSubmissionInput {
  score: String
  formName: String
  data: JSON
}

type EzformsSubmission {
  score: String
  formName: String
  data: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

type EzformsSubmissionEntity {
  id: ID
  attributes: EzformsSubmission
}

type EzformsSubmissionEntityResponse {
  data: EzformsSubmissionEntity
}

type EzformsSubmissionEntityResponseCollection {
  data: [EzformsSubmissionEntity!]!
  meta: ResponseCollectionMeta!
}

input EzformsRecipientFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  email: StringFilterInput
  number: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [EzformsRecipientFiltersInput]
  or: [EzformsRecipientFiltersInput]
  not: EzformsRecipientFiltersInput
}

input EzformsRecipientInput {
  name: String
  email: String
  number: String
}

type EzformsRecipient {
  name: String
  email: String
  number: String
  createdAt: DateTime
  updatedAt: DateTime
}

type EzformsRecipientEntity {
  id: ID
  attributes: EzformsRecipient
}

type EzformsRecipientEntityResponse {
  data: EzformsRecipientEntity
}

type EzformsRecipientEntityResponseCollection {
  data: [EzformsRecipientEntity!]!
  meta: ResponseCollectionMeta!
}

input BadgeFiltersInput {
  id: IDFilterInput
  description: StringFilterInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [BadgeFiltersInput]
  or: [BadgeFiltersInput]
  not: BadgeFiltersInput
}

input BadgeInput {
  badge_image: [ID]
  description: String
  name: String
  publishedAt: DateTime
}

type Badge {
  badge_image(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  description: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type BadgeEntity {
  id: ID
  attributes: Badge
}

type BadgeEntityResponse {
  data: BadgeEntity
}

type BadgeEntityResponseCollection {
  data: [BadgeEntity!]!
  meta: ResponseCollectionMeta!
}

input DayFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  stickies: StickyFiltersInput
  order: IntFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [DayFiltersInput]
  or: [DayFiltersInput]
  not: DayFiltersInput
}

input DayInput {
  name: String
  description: String
  stickies: [ID]
  order: Int
  publishedAt: DateTime
}

type Day {
  name: String
  description: String
  stickies(
    filters: StickyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): StickyRelationResponseCollection
  order: Int
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type DayEntity {
  id: ID
  attributes: Day
}

type DayEntityResponse {
  data: DayEntity
}

type DayEntityResponseCollection {
  data: [DayEntity!]!
  meta: ResponseCollectionMeta!
}

type DayRelationResponseCollection {
  data: [DayEntity!]!
}

input ModuleFiltersInput {
  id: IDFilterInput
  description: StringFilterInput
  days: IntFilterInput
  badge: BadgeFiltersInput
  module_days: DayFiltersInput
  title: StringFilterInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ModuleFiltersInput]
  or: [ModuleFiltersInput]
  not: ModuleFiltersInput
}

input ModuleInput {
  description: String
  days: Int
  badge: ID
  module_days: [ID]
  title: String
  name: String
  publishedAt: DateTime
}

type Module {
  description: String
  days: Int
  badge: BadgeEntityResponse
  module_days(
    filters: DayFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DayRelationResponseCollection
  title: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ModuleEntity {
  id: ID
  attributes: Module
}

type ModuleEntityResponse {
  data: ModuleEntity
}

type ModuleEntityResponseCollection {
  data: [ModuleEntity!]!
  meta: ResponseCollectionMeta!
}

enum ENUM_REV1211ROLE_ROLE {
  Facilitator
  Sprinter
  Sponsor
}

input Rev1211RoleFiltersInput {
  id: IDFilterInput
  role: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [Rev1211RoleFiltersInput]
  or: [Rev1211RoleFiltersInput]
  not: Rev1211RoleFiltersInput
}

input Rev1211RoleInput {
  role: ENUM_REV1211ROLE_ROLE
  publishedAt: DateTime
}

type Rev1211Role {
  role: ENUM_REV1211ROLE_ROLE!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type Rev1211RoleEntity {
  id: ID
  attributes: Rev1211Role
}

type Rev1211RoleEntityResponse {
  data: Rev1211RoleEntity
}

type Rev1211RoleEntityResponseCollection {
  data: [Rev1211RoleEntity!]!
  meta: ResponseCollectionMeta!
}

type Rev1211RoleRelationResponseCollection {
  data: [Rev1211RoleEntity!]!
}

enum ENUM_SPRINT_TYPE {
  starter
  second
}

input SprintFiltersInput {
  id: IDFilterInput
  description: StringFilterInput
  start_date: DateTimeFilterInput
  end_date: DateTimeFilterInput
  title: StringFilterInput
  type: StringFilterInput
  location: StringFilterInput
  sprint_days: SprintDayFiltersInput
  sprinters: UserProfileFiltersInput
  facilitators: UserProfileFiltersInput
  module: ModuleFiltersInput
  sponsors: UserProfileFiltersInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [SprintFiltersInput]
  or: [SprintFiltersInput]
  not: SprintFiltersInput
}

input SprintInput {
  description: String
  start_date: DateTime
  end_date: DateTime
  title: String
  type: ENUM_SPRINT_TYPE
  location: String
  sprint_days: [ID]
  sprinters: [ID]
  facilitators: [ID]
  module: ID
  sponsors: [ID]
  name: String
  publishedAt: DateTime
}

type Sprint {
  description: String
  start_date: DateTime
  end_date: DateTime
  title: String
  type: ENUM_SPRINT_TYPE
  location: String
  sprint_days(
    filters: SprintDayFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SprintDayRelationResponseCollection
  sprinters(
    filters: UserProfileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): UserProfileRelationResponseCollection
  facilitators(
    filters: UserProfileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): UserProfileRelationResponseCollection
  module: ModuleEntityResponse
  sponsors(
    filters: UserProfileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): UserProfileRelationResponseCollection
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type SprintEntity {
  id: ID
  attributes: Sprint
}

type SprintEntityResponse {
  data: SprintEntity
}

type SprintEntityResponseCollection {
  data: [SprintEntity!]!
  meta: ResponseCollectionMeta!
}

type SprintRelationResponseCollection {
  data: [SprintEntity!]!
}

input SprintDayFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  start_date_time: DateTimeFilterInput
  module_day: DayFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [SprintDayFiltersInput]
  or: [SprintDayFiltersInput]
  not: SprintDayFiltersInput
}

input SprintDayInput {
  name: String
  description: String
  start_date_time: DateTime
  module_day: ID
  publishedAt: DateTime
}

type SprintDay {
  name: String
  description: String
  start_date_time: DateTime
  module_day: DayEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type SprintDayEntity {
  id: ID
  attributes: SprintDay
}

type SprintDayEntityResponse {
  data: SprintDayEntity
}

type SprintDayEntityResponseCollection {
  data: [SprintDayEntity!]!
  meta: ResponseCollectionMeta!
}

type SprintDayRelationResponseCollection {
  data: [SprintDayEntity!]!
}

enum ENUM_STICKY_TYPE {
  video
  form
  document
}

input StickyFiltersInput {
  id: IDFilterInput
  description: StringFilterInput
  completed: BooleanFilterInput
  type: StringFilterInput
  url: StringFilterInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [StickyFiltersInput]
  or: [StickyFiltersInput]
  not: StickyFiltersInput
}

input StickyInput {
  description: String
  media: ID
  completed: Boolean
  type: ENUM_STICKY_TYPE
  url: String
  name: String
  publishedAt: DateTime
}

type Sticky {
  description: String
  media: UploadFileEntityResponse
  completed: Boolean!
  type: ENUM_STICKY_TYPE!
  url: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type StickyEntity {
  id: ID
  attributes: Sticky
}

type StickyEntityResponse {
  data: StickyEntity
}

type StickyEntityResponseCollection {
  data: [StickyEntity!]!
  meta: ResponseCollectionMeta!
}

type StickyRelationResponseCollection {
  data: [StickyEntity!]!
}

input TimeZoneFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  location: StringFilterInput
  offset: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [TimeZoneFiltersInput]
  or: [TimeZoneFiltersInput]
  not: TimeZoneFiltersInput
}

input TimeZoneInput {
  name: String
  description: String
  location: String
  offset: String
  publishedAt: DateTime
}

type TimeZone {
  name: String
  description: String
  location: String
  offset: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type TimeZoneEntity {
  id: ID
  attributes: TimeZone
}

type TimeZoneEntityResponse {
  data: TimeZoneEntity
}

type TimeZoneEntityResponseCollection {
  data: [TimeZoneEntity!]!
  meta: ResponseCollectionMeta!
}

input UserProfileFiltersInput {
  id: IDFilterInput
  email: StringFilterInput
  sprints: SprintFiltersInput
  facilitated: SprintFiltersInput
  rev_1211_roles: Rev1211RoleFiltersInput
  users_permissions_user: UsersPermissionsUserFiltersInput
  sponsors: SprintFiltersInput
  firstname: StringFilterInput
  lastname: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [UserProfileFiltersInput]
  or: [UserProfileFiltersInput]
  not: UserProfileFiltersInput
}

input UserProfileInput {
  email: String
  sprints: [ID]
  facilitated: [ID]
  rev_1211_roles: [ID]
  users_permissions_user: ID
  sponsors: [ID]
  firstname: String
  lastname: String
  publishedAt: DateTime
}

type UserProfile {
  email: String!
  sprints(
    filters: SprintFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SprintRelationResponseCollection
  facilitated(
    filters: SprintFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SprintRelationResponseCollection
  rev_1211_roles(
    filters: Rev1211RoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): Rev1211RoleRelationResponseCollection
  users_permissions_user: UsersPermissionsUserEntityResponse
  sponsors(
    filters: SprintFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SprintRelationResponseCollection
  firstname: String
  lastname: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type UserProfileEntity {
  id: ID
  attributes: UserProfile
}

type UserProfileEntityResponse {
  data: UserProfileEntity
}

type UserProfileEntityResponseCollection {
  data: [UserProfileEntity!]!
  meta: ResponseCollectionMeta!
}

type UserProfileRelationResponseCollection {
  data: [UserProfileEntity!]!
}

union GenericMorph =
    UploadFile
  | UploadFolder
  | I18NLocale
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | CustomLinksCustomLink
  | CustomLinksTempuri
  | EzformsSubmission
  | EzformsRecipient
  | Badge
  | Day
  | Module
  | Rev1211Role
  | Sprint
  | SprintDay
  | Sticky
  | TimeZone
  | UserProfile

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  customLinksCustomLink(id: ID): CustomLinksCustomLinkEntityResponse
  customLinksCustomLinks(
    filters: CustomLinksCustomLinkFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CustomLinksCustomLinkEntityResponseCollection
  customLinksTempuri(
    filters: CustomLinksTempuriFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CustomLinksTempuriEntityResponseCollection
  ezformsSubmission(id: ID): EzformsSubmissionEntityResponse
  ezformsSubmissions(
    filters: EzformsSubmissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): EzformsSubmissionEntityResponseCollection
  ezformsRecipient(id: ID): EzformsRecipientEntityResponse
  ezformsRecipients(
    filters: EzformsRecipientFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): EzformsRecipientEntityResponseCollection
  badge(id: ID): BadgeEntityResponse
  badges(
    filters: BadgeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): BadgeEntityResponseCollection
  day(id: ID): DayEntityResponse
  days(
    filters: DayFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DayEntityResponseCollection
  module(id: ID): ModuleEntityResponse
  modules(
    filters: ModuleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ModuleEntityResponseCollection
  rev1211Role(id: ID): Rev1211RoleEntityResponse
  rev1211Roles(
    filters: Rev1211RoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): Rev1211RoleEntityResponseCollection
  sprint(id: ID): SprintEntityResponse
  sprints(
    filters: SprintFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SprintEntityResponseCollection
  sprintDay(id: ID): SprintDayEntityResponse
  sprintDays(
    filters: SprintDayFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SprintDayEntityResponseCollection
  sticky(id: ID): StickyEntityResponse
  stickies(
    filters: StickyFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): StickyEntityResponseCollection
  timeZone(id: ID): TimeZoneEntityResponse
  timeZones(
    filters: TimeZoneFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): TimeZoneEntityResponseCollection
  userProfile(id: ID): UserProfileEntityResponse
  userProfiles(
    filters: UserProfileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): UserProfileEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  updateUploadFolder(
    id: ID!
    data: UploadFolderInput!
  ): UploadFolderEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  createCustomLinksCustomLink(
    data: CustomLinksCustomLinkInput!
  ): CustomLinksCustomLinkEntityResponse
  updateCustomLinksCustomLink(
    id: ID!
    data: CustomLinksCustomLinkInput!
  ): CustomLinksCustomLinkEntityResponse
  deleteCustomLinksCustomLink(id: ID!): CustomLinksCustomLinkEntityResponse
  createCustomLinksTempuri(
    data: CustomLinksTempuriInput!
  ): CustomLinksTempuriEntityResponse
  updateCustomLinksTempuri(
    id: ID!
    data: CustomLinksTempuriInput!
  ): CustomLinksTempuriEntityResponse
  deleteCustomLinksTempuri(id: ID!): CustomLinksTempuriEntityResponse
  createEzformsSubmission(
    data: EzformsSubmissionInput!
  ): EzformsSubmissionEntityResponse
  updateEzformsSubmission(
    id: ID!
    data: EzformsSubmissionInput!
  ): EzformsSubmissionEntityResponse
  deleteEzformsSubmission(id: ID!): EzformsSubmissionEntityResponse
  createEzformsRecipient(
    data: EzformsRecipientInput!
  ): EzformsRecipientEntityResponse
  updateEzformsRecipient(
    id: ID!
    data: EzformsRecipientInput!
  ): EzformsRecipientEntityResponse
  deleteEzformsRecipient(id: ID!): EzformsRecipientEntityResponse
  createBadge(data: BadgeInput!): BadgeEntityResponse
  updateBadge(id: ID!, data: BadgeInput!): BadgeEntityResponse
  deleteBadge(id: ID!): BadgeEntityResponse
  createDay(data: DayInput!): DayEntityResponse
  updateDay(id: ID!, data: DayInput!): DayEntityResponse
  deleteDay(id: ID!): DayEntityResponse
  createModule(data: ModuleInput!): ModuleEntityResponse
  updateModule(id: ID!, data: ModuleInput!): ModuleEntityResponse
  deleteModule(id: ID!): ModuleEntityResponse
  createRev1211Role(data: Rev1211RoleInput!): Rev1211RoleEntityResponse
  updateRev1211Role(id: ID!, data: Rev1211RoleInput!): Rev1211RoleEntityResponse
  deleteRev1211Role(id: ID!): Rev1211RoleEntityResponse
  createSprint(data: SprintInput!): SprintEntityResponse
  updateSprint(id: ID!, data: SprintInput!): SprintEntityResponse
  deleteSprint(id: ID!): SprintEntityResponse
  createSprintDay(data: SprintDayInput!): SprintDayEntityResponse
  updateSprintDay(id: ID!, data: SprintDayInput!): SprintDayEntityResponse
  deleteSprintDay(id: ID!): SprintDayEntityResponse
  createSticky(data: StickyInput!): StickyEntityResponse
  updateSticky(id: ID!, data: StickyInput!): StickyEntityResponse
  deleteSticky(id: ID!): StickyEntityResponse
  createTimeZone(data: TimeZoneInput!): TimeZoneEntityResponse
  updateTimeZone(id: ID!, data: TimeZoneInput!): TimeZoneEntityResponse
  deleteTimeZone(id: ID!): TimeZoneEntityResponse
  createUserProfile(data: UserProfileInput!): UserProfileEntityResponse
  updateUserProfile(id: ID!, data: UserProfileInput!): UserProfileEntityResponse
  deleteUserProfile(id: ID!): UserProfileEntityResponse
  upload(
    refId: ID
    ref: String
    field: String
    info: FileInfoInput
    file: Upload!
  ): UploadFileEntityResponse!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    files: [Upload]!
  ): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse

  # Create a new role
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  # Update an existing role
  updateUsersPermissionsRole(
    id: ID!
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsUpdateRolePayload

  # Delete an existing role
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  # Create a new user
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  updateUsersPermissionsUser(
    id: ID!
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Delete an existing user
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  # Register a user
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  # Request a reset password token
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  # Reset user password. Confirm with a code (resetToken from forgotPassword)
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload

  # Change user password. Confirm with the current password.
  changePassword(
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload

  # Confirm an email users email address
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
